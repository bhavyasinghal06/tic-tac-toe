{"version":3,"sources":["Grid.js","TicTacToe/minMax.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","position","flexGrow","paper","height","width","backgroundColor","borderColor","borderRadius","paperFlash","control","margin","spacing","textO","textAlign","fontSize","justifyContent","color","fontStyle","textX","Grid9","grid","clickHandler","flashIndices","useState","classes","forceUpdate","setValue","value","useForceUpdate","onClick","e","mapGridValue","Grid","className","style","Row","map","Col","xs","Paper","includes","variant","minimax","newBoard","player","depth","availSpots","emptyIndexies","winning","HUMAN_PLAYER_SYMBOL","score","AI_PLAYER_SYMBOL","length","bestMove","moves","i","move","index","result","push","bestScore","board","filter","s","mapPlayer","ai","human","App","setGrid","setPlayer","setDepth","submit","setSubmit","win","setWin","setDepthFn","evtKey","Number","setPlayerFn","show","setShow","handleClose","handleShow","useEffect","p","JSON","parse","stringify","updateGrid","handleDShow","ind","v","showD","setShowD","handleDClose","Container","Jumbotron","CardDeck","Card","border","Body","DropdownButton","id","title","marginRight","Dropdown","Item","as","eventKey","onSelect","Title","ListGroup","ListGroupItem","Button","alignItems","Modal","onHide","Header","closeButton","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e76215f.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {PropTypes} from \"prop-types\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n       position:\"absolute\",\r\n       flexGrow:1,\r\n      \r\n    },\r\n    paper: {\r\n        height: 96.5,\r\n        width: 98,\r\n        backgroundColor: \"white\",\r\n        borderColor:\"black\",\r\n        borderRadius:0\r\n\r\n    },\r\n    paperFlash: {\r\n        height: 96.5,\r\n        width: 98,\r\n        backgroundColor: \"white\",\r\n        borderColor:\"black\",\r\n        borderRadius:0\r\n\r\n    },\r\n    control: {\r\n        //padding: theme.spacing(0),\r\n        margin: theme.spacing(0, 'auto')\r\n    },\r\n    textO: {\r\n        textAlign: 'center',\r\n        fontSize: 50,\r\n        justifyContent: 'centre',\r\n        color: \"pink\",\r\n        fontStyle: 'roman'\r\n    },\r\n    textX: {\r\n        textAlign: 'center',\r\n        justifyContent: 'centre',\r\n        fontSize: 50,\r\n        color:\"yellow\",\r\n        fontStyle: 'roman'\r\n    }\r\n}));\r\n\r\nfunction useForceUpdate(){\r\n    const [value, setValue] = useState(0); // integer state\r\n    return () => setValue(value => ++value); // update the state to force render\r\n}\r\n\r\nconst Grid9 = ({grid, clickHandler, flashIndices=[]}) => {\r\n\r\n    const [spacing] = useState(0);\r\n    const classes = useStyles();\r\n\r\n    const forceUpdate = useForceUpdate();\r\n    const onClick = (e) => {\r\n        clickHandler(e);\r\n        forceUpdate();\r\n    \r\n    };\r\n\r\n    const mapGridValue = (e) => {\r\n\r\n        if (e === \"O\" || e === \"X\") {\r\n            return e;\r\n        }\r\n        //if(e)\r\n        return \"\";\r\n    };\r\n    \r\n    return (\r\n           \r\n        <Grid  className={classes.root} >\r\n            <Grid style={{width: '20rem'} } >\r\n            \r\n                <Row>\r\n                {\r\n                    [0, 1, 2].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes()? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => onClick(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))\r\n                }\r\n                </Row>\r\n                <Row>\r\n                {\r\n                    [3, 4, 5].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes()? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => onClick(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n                <Row>\r\n                {\r\n                    [6, 7, 8].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes()? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => onClick(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n                \r\n               \r\n            </Grid>\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nGrid9.propTypes = {\r\n    grid: PropTypes.array,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nexport default Grid9;","import {HUMAN_PLAYER_SYMBOL, AI_PLAYER_SYMBOL} from \"../App\";\r\n\r\nexport function minimax(newBoard, player, depth) {\r\n    \r\n    //available spots array\r\n    var availSpots = emptyIndexies(newBoard);\r\n\r\n    // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n    if (winning(newBoard, HUMAN_PLAYER_SYMBOL)) \r\n    {\r\n        return {score: -10};\r\n    } \r\n    else if (winning(newBoard, AI_PLAYER_SYMBOL)) {\r\n        return {score: 10};\r\n    } \r\n    else if (availSpots.length === 0) {\r\n        return {score: 0};\r\n    }\r\n    if (depth === 0) {\r\n        return {score: 0};\r\n    }\r\n\r\n// an array to collect all the objects\r\n    var moves = [];\r\n\r\n    // loop through available spots\r\n    for (var i = 0; i < availSpots.length; i++)\r\n    {\r\n        //create an object for each and store the index of that spot that was stored as a number in the object's index key\r\n            var move = {};\r\n            move.index = newBoard[availSpots[i]];\r\n\r\n            // set the empty spot to the current player\r\n            newBoard[availSpots[i]] = player;\r\n\r\n            //if collect the score resulted from calling minimax on the opponent of the current player\r\n            if (player === AI_PLAYER_SYMBOL) \r\n            {\r\n                var result = minimax(newBoard, HUMAN_PLAYER_SYMBOL);\r\n                move.score = result.score;\r\n            } \r\n            else \r\n            {\r\n                var result = minimax(newBoard, AI_PLAYER_SYMBOL);\r\n                move.score = result.score;\r\n            }\r\n\r\n            //reset the spot to empty\r\n            newBoard[availSpots[i]] = move.index;\r\n\r\n            // push the all possible like out of 4 nodes 2 are  objects to the array\r\n            moves.push(move);\r\n    }\r\n\r\n// if it is the computer's turn loop over the moves and choose the move with the highest score\r\n    var bestMove;\r\n    if (player === AI_PLAYER_SYMBOL) \r\n    {\r\n        var bestScore = -10000;\r\n        for (var i = 0; i < moves.length; i++) \r\n        {\r\n            if (moves[i].score > bestScore)\r\n            {\r\n                bestScore = moves[i].score;\r\n                bestMove = i;\r\n            }\r\n        }\r\n    } \r\n    else {\r\n// else loop over the moves and choose the move with the lowest score\r\n        var bestScore = 10000;\r\n        for (var i = 0; i < moves.length; i++) \r\n        {\r\n            if (moves[i].score < bestScore) \r\n            {\r\n                bestScore = moves[i].score;\r\n                bestMove = i;\r\n            }\r\n        }\r\n    }\r\n\r\n// return the chosen move (object) from the array to the higher depth\r\n    return moves[bestMove];\r\n}\r\n\r\n// //1.returns the available spots on the board/grid\r\nexport function emptyIndexies(board) {\r\n    return board.filter(s => s !== \"O\" && s !== \"X\");\r\n}\r\n\r\n// winning combinations using the board indexies for instace the first win could be 3 xes in a row\r\nexport function winning(board, player) {\r\n    if (\r\n        (board[0] === player && board[1] === player && board[2] === player) ||\r\n        (board[3] === player && board[4] === player && board[5] === player) ||\r\n        (board[6] === player && board[7] === player && board[8] === player) ||\r\n        (board[0] === player && board[3] === player && board[6] === player) ||\r\n        (board[1] === player && board[4] === player && board[7] === player) ||\r\n        (board[2] === player && board[5] === player && board[8] === player) ||\r\n        (board[0] === player && board[4] === player && board[8] === player) ||\r\n        (board[2] === player && board[4] === player && board[6] === player)\r\n    ) \r\n    {\r\n      return true;\r\n    } \r\n    else {\r\n        return false;\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\nimport {Button, CardDeck, Container, Row} from \"react-bootstrap\";\nimport Card, { CardBody } from \"react-bootstrap/Card\";\nimport {Modal} from \"react-bootstrap\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport Grid from \"./Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport {emptyIndexies, minimax, winning} from \"./TicTacToe/minMax\";\nimport moment from 'moment';\nimport {render} from 'react-dom';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { auto } from '@popperjs/core';\n\nexport const HUMAN_PLAYER = \"human\";\nexport const AI_PLAYER = \"ai\";\n\nexport const HUMAN_PLAYER_SYMBOL = \"O\";\nexport const AI_PLAYER_SYMBOL = \"X\";\n\n\n\nconst mapPlayer = {\n    ai: \"Computer\",\n    human: \"Human\"\n};\n\nfunction App() {\n\n    const [grid, setGrid] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n    const [player, setPlayer] = useState(HUMAN_PLAYER); //for by default\n    const [depth, setDepth] = useState(1);//for by default\n    const [submit, setSubmit] = useState(false);//for by default\n    const [win, setWin] = useState(\"\");//for by default\n\n    const setDepthFn = (evtKey) => {\n        setDepth(Number(evtKey));\n        setSubmit(false);\n    };\n\n    const setPlayerFn = (evtKey) => {\n        setPlayer(evtKey);\n        setSubmit(false);\n        setGrid([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n    };\n    \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    const onClick = (e) => {\n        //to avoid click on already clicked spots\n        if(grid[e]=== \"X\" || grid[e]===\"O\")\n        {\n             return;\n    \n        }\n        if (player === HUMAN_PLAYER) {\n            updateGrid(e, HUMAN_PLAYER_SYMBOL);\n            \n            setPlayer(AI_PLAYER);\n\n            if (emptyIndexies(grid).length <= 2) {\n                var tempGrid = JSON.parse(JSON.stringify(grid));\n                var p = minimax(tempGrid, HUMAN_PLAYER_SYMBOL, depth);\n                if (p.score === 0) {\n                    handleDShow();\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (player === AI_PLAYER) {\n            var tempGrid = JSON.parse(JSON.stringify(grid));\n            var p = minimax(tempGrid, AI_PLAYER_SYMBOL, depth);\n            updateGrid(p.index, AI_PLAYER_SYMBOL);\n            if (p.score === 0 && emptyIndexies(grid).length <= 2) {\n                handleDShow();\n            }\n            setPlayer(HUMAN_PLAYER);\n        }\n    }, [submit, player]);\n\n\n    const updateGrid = (ind, v) => {\n        grid[ind] = v;\n       \n        if (winning(grid, HUMAN_PLAYER_SYMBOL)) {\n            setWin(HUMAN_PLAYER);\n            handleShow();\n           }\n        \n        if (winning(grid, AI_PLAYER_SYMBOL)) {\n            setWin(AI_PLAYER);\n            handleShow();\n        }\n    }\n\n    const newGame = () => {\n        setSubmit(true);\n        setDepth(1);\n        setGrid([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n        setPlayer(HUMAN_PLAYER);\n    }\n    \n    \n    function winModal() {\n    \n        \n        return (\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Game Ends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {win === HUMAN_PLAYER ? \"Congratulations, you won!\" : \"Oops, you lost!\"}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    const [showD, setShowD] = useState(false);\n    const handleDClose = () => setShowD(false);\n    const handleDShow = () => setShowD(true);\n\n    function drawModal() {\n        return (\n            <Modal show={showD} onHide={handleDClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Game Ends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Match Drawn!\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleDClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n    \n\n    const borderLessCard = {\n        border: 0, \n        alignItems: 'center'\n    };\n\n    return (\n        <Container className=\"p-3\" >\n            <Jumbotron>\n                <h1>Hello, hooman!</h1>\n                <p>\n                    This is a react-app for AI powered Tic-Tac-Toe Game.\n                </p>\n            </Jumbotron>\n            <CardDeck>\n                <Card border=\"secondary\" style={{width: '18rem'}}>\n                    <Card.Body>\n                        <Row>\n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Player\"\n                                            style={{marginRight: 10}}>\n                                <Dropdown.Item as=\"button\" eventKey={HUMAN_PLAYER}\n                                               onSelect={setPlayerFn}>Human (O)</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey={AI_PLAYER}\n                                               onSelect={setPlayerFn}>Computer (X)</Dropdown.Item>\n                            </DropdownButton>\n                            {/*<FormControl component=\"fieldset\">*/}\n                            {/*    <FormLabel component=\"legend\">Player</FormLabel>*/}\n                            {/*    <RadioGroup aria-label=\"player\" name=\"player\" value={player} onChange={(v) => setPlayerFn(v)}>*/}\n                            {/*        <FormControlLabel value={HUMAN_PLAYER} control={<Radio />} label={mapPlayer[HUMAN_PLAYER]}/>*/}\n                            {/*        <FormControlLabel value={AI_PLAYER} control={<Radio />} label={mapPlayer[AI_PLAYER]} />*/}\n                            {/*    </RadioGroup>*/}\n                            {/*</FormControl>*/}\n\n                            {/*<FormControl component=\"fieldset\">*/}\n                            {/*    <FormLabel component=\"legend\">Depth</FormLabel>*/}\n                            {/*    <RadioGroup aria-label=\"depth\" name=\"depth\" value={depth} onChange={setDepthFn}>*/}\n                            {/*        <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />*/}\n                            {/*        <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />*/}\n                            {/*        <FormControlLabel value=\"100\" control={<Radio />} label=\"MAX\" />*/}\n                            {/*    </RadioGroup>*/}\n                            {/*</FormControl>*/}\n\n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Depth/Level\"style={{marginRight: 10}}>\n                                <Dropdown.Item as=\"button\" eventKey=\"1\" onSelect={setDepthFn}>Easy</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey=\"5\" onSelect={setDepthFn}>Medium</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey=\"100\" onSelect={setDepthFn}>Hard</Dropdown.Item>\n                            </DropdownButton>\n                        </Row>\n                    </Card.Body>\n                    <Card.Body>\n                        <Card.Title>Selections Made</Card.Title>\n                        <ListGroup className=\"list-group-flush\">\n                            <ListGroupItem>Player: {mapPlayer[player]}</ListGroupItem>\n                            <ListGroupItem>Depth: {depth !== 100 ? depth : \"MAX\"}</ListGroupItem>\n                        </ListGroup>\n                    </Card.Body>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => newGame()}\n                    >\n                        New Game\n                    </Button>\n                </Card>\n                <Card style={borderLessCard}>\n                \n                    <Grid grid={grid} clickHandler={onClick}/>\n                    \n                </Card>\n                {show > 0 ? winModal() : null}\n                {showD > 0 ? drawModal() : null}\n            </CardDeck>\n        </Container>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}