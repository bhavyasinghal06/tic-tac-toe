{"version":3,"sources":["Grid.js","ticTacToe/minMax.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","position","flexGrow","paper","height","width","backgroundColor","borderColor","borderRadius","paperFlash","control","margin","spacing","textO","textAlign","fontSize","justifyContent","color","fontStyle","textX","Grid9","grid","clickHandler","flashIndices","classes","mapGridValue","e","Grid","className","style","Row","map","value","Col","xs","Paper","includes","variant","onClick","minimax","newBoard","player","depth","availSpots","emptyIndexies","winning","HUMAN_PLAYER_SYMBOL","score","AI_PLAYER_SYMBOL","length","bestMove","moves","i","move","index","result","push","bestScore","board","filter","s","mapPlayer","ai","human","App","useState","setGrid","setPlayer","setDepth","submit","setSubmit","win","setWin","setflashIndices","setmove","setDepthFn","evtKey","Number","setPlayerFn","updateGrid","ind","v","getFlashIndices","handleShow","useEffect","p","JSON","parse","stringify","setSuggestMove","handleDShow","show","setShow","handleClose","showD","setShowD","handleDClose","Container","backgroundcolor","Jumbotron","CardDeck","Card","border","Body","DropdownButton","id","title","size","marginRight","Dropdown","Item","as","eventKey","onSelect","Title","ListGroup","ListGroupItem","Button","alignItems","Modal","onHide","Header","closeButton","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9f37238.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n       position:\"absolute\",\r\n       flexGrow:1,\r\n      \r\n    },\r\n    paper: {\r\n        height: 96.5,\r\n        width: 98,\r\n        backgroundColor: \"white\",\r\n        borderColor:\"black\",\r\n        borderRadius:0\r\n\r\n    },\r\n    paperFlash: {\r\n        height: 96.5,\r\n        width: 98,\r\n        backgroundColor: \"pink\",\r\n        borderColor:\"black\",\r\n        borderRadius:0\r\n\r\n    },\r\n    control: {\r\n        margin: theme.spacing(0, 'auto')\r\n    },\r\n    textO: {\r\n        textAlign: 'center',\r\n        fontSize: 50,\r\n        justifyContent: 'centre',\r\n        color: \"purple\",\r\n        fontStyle: 'roman'\r\n    },\r\n    textX: {\r\n        textAlign: 'center',\r\n        justifyContent: 'centre',\r\n        fontSize: 50,\r\n        color:\"red\",\r\n        fontStyle: 'roman'\r\n    }\r\n}));\r\n\r\n//grid9 as name already \"grid\" defined so name conflict\r\nconst Grid9 = ({grid, clickHandler, flashIndices=[]}) => {\r\n\r\n    const classes = useStyles();\r\n   \r\n    const mapGridValue = (e) => {\r\n        if (e === \"O\" || e === \"X\") {\r\n            return e;\r\n        }\r\n        return \"\";\r\n    };\r\n    \r\n    return (\r\n           \r\n        <Grid  className={classes.root} >\r\n            <Grid style={{width: '20rem'} } >\r\n            \r\n                <Row>\r\n                {\r\n                    [0, 1, 2].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes(value)? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => clickHandler(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))\r\n                }\r\n                </Row>\r\n                <Row>\r\n                {\r\n                    [3, 4, 5].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes(value)? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => clickHandler(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n                <Row>\r\n                {\r\n                    [6, 7, 8].map(value => (\r\n                    <Col xs={3}>\r\n                        <Paper className={flashIndices.includes(value)? classes.paperFlash : classes.paper}  variant=\"outlined\" onClick={() => clickHandler(value)} >\r\n                                <p className={mapGridValue(grid[value]) === \"O\" ? classes.textO : classes.textX}>{mapGridValue(grid[value])}</p>\r\n                        </Paper>\r\n                       \r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n                \r\n               \r\n            </Grid>\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Grid9;","import {HUMAN_PLAYER_SYMBOL, AI_PLAYER_SYMBOL} from \"../App\";\r\n\r\nexport function minimax(newBoard, player, depth) \r\n{\r\n        //available spots array\r\n        var availSpots = emptyIndexies(newBoard);\r\n\r\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n        if (winning(newBoard, HUMAN_PLAYER_SYMBOL)) \r\n        {\r\n            return {score: -10};\r\n        } \r\n        else if (winning(newBoard, AI_PLAYER_SYMBOL))\r\n        {\r\n            return {score: 10};\r\n        } \r\n        else if (availSpots.length === 0) \r\n        {\r\n            return {score: 0};\r\n        }\r\n        if (depth === 0) \r\n        {\r\n            return {score: 0};\r\n        }\r\n\r\n        // an array to collect all the objects\r\n        var moves = [];\r\n\r\n        // loop through available spots\r\n        for (var i = 0; i < availSpots.length; i++)\r\n        {\r\n            //create an object for each and store the index of that spot that was stored as a number in the object's index key\r\n                var move = {};\r\n                move.index = newBoard[availSpots[i]];\r\n\r\n                // set the empty spot to the current player\r\n                newBoard[availSpots[i]] = player;\r\n\r\n                //if collect the score resulted from calling minimax on the opponent of the current player\r\n                if (player === AI_PLAYER_SYMBOL) \r\n                {\r\n                    var result = minimax(newBoard, HUMAN_PLAYER_SYMBOL,depth--);\r\n                    move.score = result.score;\r\n                } \r\n                else \r\n                {\r\n                    var result = minimax(newBoard, AI_PLAYER_SYMBOL,depth--);\r\n                    move.score = result.score;\r\n                }\r\n\r\n                //reset the spot to empty\r\n                newBoard[availSpots[i]] = move.index;\r\n\r\n                // push the all possible like out of 4 nodes 2 are  objects to the array\r\n                moves.push(move);\r\n        }\r\n\r\n        // if it is the computer's turn loop over the moves and choose the move with the highest score\r\n        var bestMove;\r\n        if (player === AI_PLAYER_SYMBOL) \r\n        {\r\n            var bestScore = -10000;\r\n            for (var i = 0; i < moves.length; i++) \r\n            {\r\n                if (moves[i].score > bestScore)\r\n                {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        } \r\n        // else loop over the moves and choose the move with the lowest score\r\n        else\r\n         {\r\n            var bestScore = 10000;\r\n            for (var i = 0; i < moves.length; i++) \r\n            {\r\n                if (moves[i].score < bestScore) \r\n                {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // return the chosen move (object) from the array to the higher depth\r\n        return moves[bestMove];\r\n}\r\n\r\n// //1.returns the available spots on the board/grid\r\nexport function emptyIndexies(board) {\r\n    return board.filter(s => s !== \"O\" && s !== \"X\");\r\n}\r\n\r\n// winning combinations using the board indexies for instance the first win could be 3 xes in a row\r\nexport function winning(board, player)\r\n{\r\n    if (\r\n        (board[0] === player && board[1] === player && board[2] === player) ||\r\n        (board[3] === player && board[4] === player && board[5] === player) ||\r\n        (board[6] === player && board[7] === player && board[8] === player) ||\r\n        (board[0] === player && board[3] === player && board[6] === player) ||\r\n        (board[1] === player && board[4] === player && board[7] === player) ||\r\n        (board[2] === player && board[5] === player && board[8] === player) ||\r\n        (board[0] === player && board[4] === player && board[8] === player) ||\r\n        (board[2] === player && board[4] === player && board[6] === player)\r\n    ) \r\n    {\r\n      return true;\r\n    } \r\n    else {\r\n        return false;\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\nimport {Button, CardDeck, Container, Row} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport {Modal} from \"react-bootstrap\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport Grid from \"./Grid\";\nimport {emptyIndexies, minimax, winning} from \"./ticTacToe/minMax\";\n\n\n\nexport const HUMAN_PLAYER = \"human\";\nexport const AI_PLAYER = \"ai\";\n\nexport const HUMAN_PLAYER_SYMBOL = \"O\";\nexport const AI_PLAYER_SYMBOL = \"X\";\n\nconst mapPlayer = {\n    ai: \"Computer\",\n    human: \"Human\"\n};\n\nfunction App() {\n\n    const [grid, setGrid] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n    const [player, setPlayer] = useState(HUMAN_PLAYER); //for by default\n    const [depth, setDepth] = useState(1);//for by default\n    const [submit, setSubmit] = useState(false);//for by default\n    const [win, setWin] = useState(\"\");//for by default\n    const [flashIndices, setflashIndices] = useState([]);\n    const [move,setmove] = useState(\"\");\n   \n    const setDepthFn = (evtKey) => {\n        setDepth(Number(evtKey));\n        setSubmit(false);\n    };\n\n    const setPlayerFn = (evtKey) => {\n        setPlayer(evtKey);\n        setSubmit(false);\n        setGrid([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n        setflashIndices([]);\n    };\n    \n    \n    const onClick = (e) => \n    {\n        //to avoid click on already clicked spots\n        if(grid[e]=== \"X\" || grid[e]===\"O\")\n        {\n            return;\n        }\n       \n        updateGrid(e, HUMAN_PLAYER_SYMBOL);\n        setPlayer(AI_PLAYER);\n            //useEffect will be called\n       \n    };\n\n    const updateGrid = (ind, v) =>\n    {\n        grid[ind] = v;\n       \n        if (winning(grid, HUMAN_PLAYER_SYMBOL)) {\n            getFlashIndices();\n            setWin(HUMAN_PLAYER);\n            handleShow();\n            setmove(\"\");\n           }\n        \n        if (winning(grid, AI_PLAYER_SYMBOL)) {\n            getFlashIndices();\n            setWin(AI_PLAYER);\n            handleShow();\n            setmove(\"\");\n        }\n    }\n\n    useEffect(() => {\n        \n        if(player===HUMAN_PLAYER)//to suggest human his/her move\n        {\n            var tempGrid = JSON.parse(JSON.stringify(grid));\n            var p = minimax(tempGrid, HUMAN_PLAYER_SYMBOL, 100);   \n            setSuggestMove(p.index);\n        }\n        \n        if (player === AI_PLAYER)//when chance of AI then minimax to update grid acc to ai pos\n        {    \n            var tempGrid = JSON.parse(JSON.stringify(grid));\n            \n            var p = minimax(tempGrid, AI_PLAYER_SYMBOL, depth); //p is struct having p.index and p.score\n            updateGrid(p.index, AI_PLAYER_SYMBOL);\n\n            if (p.score === 0 && emptyIndexies(grid).length <2) \n            {\n                handleDShow(); \n            }\n            setPlayer(HUMAN_PLAYER);\n        }\n    }, [submit, player]);\n    \n    const setSuggestMove = (value) =>\n    {\n        //console.log(value);\n        if(value===0)\n        {\n            setmove(\"1st row 1st col\");\n        }\n        if(value===1)\n        {\n            setmove(\"1st row 2nd col\");\n        }\n        if(value===2)\n        {\n            setmove(\"1st row 3rd col\");\n        }\n        if(value===3)\n        {\n            setmove(\"2nd row 1st col\");\n        }\n        if(value===4)\n        {\n            setmove(\"2nd row 2nd col\");\n        }\n        if(value===5)\n        {\n            setmove(\"2nd row 3rd col\");\n        }\n        if(value===6)\n        {\n            setmove(\"3rd row 1st col\");\n        }\n        if(value===7)\n        {\n            setmove(\"3rd row 2nd col\");\n        }\n        if(value===8)\n        {\n            setmove(\"3nd row 3nd col\");\n        }\n        if(emptyIndexies(grid).length<1)\n        {\n            setmove(\"\");\n        }\n          \n    }\n    \n    function getFlashIndices()\n    {\n            if(grid[0]===grid[1] && grid[2] === grid[1])\n            {\n                setflashIndices([0,1,2]);\n            }\n            else if (grid[3]&& grid[3]=== grid[4]  && grid[5] === grid[4]) \n            {   \n                setflashIndices([3,4,5]);\n            }\n            if(grid[6]&&grid[6]===grid[7] && grid[7] === grid[8]){\n                setflashIndices([6,7,8]);\n            }\n            else if (grid[0]&& grid[3]=== grid[0]  && grid[3] === grid[6]) \n            { \n                setflashIndices([0,3,6]);\n            }\n            if(grid[1]===grid[4] && grid[4] === grid[7]){\n               \n                setflashIndices([1,4,7]);\n            }\n            else if (grid[2]=== grid[5]  && grid[5] === grid[8]) \n            {   \n                setflashIndices([2,5,8]);\n            }\n            if(grid[0]===grid[4] && grid[4] === grid[8]){\n                \n                setflashIndices([0,4,8]);\n            }\n            else if (grid[2]=== grid[4]  && grid[4] === grid[6]) \n            {   \n                setflashIndices([2,4,6]);\n            }\n    };\n      \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n\n    function winModal() {\n\n        return (\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Game Ends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {win === HUMAN_PLAYER ? \"Congratulations, you won!\" : \"Oops, you lost!\"}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        ) ;\n    }\n    \n\n    const [showD, setShowD] = useState(false);\n    const handleDClose = () => setShowD(false);\n    const handleDShow = () => setShowD(true);\n\n    function drawModal() {\n        return (\n           <Modal show={showD} onHide={handleDClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Game Ends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Match Drawn!\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleDClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    const newGame = () => {\n        setSubmit(true);\n        setDepth(1);\n        setGrid([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n        setPlayer(HUMAN_PLAYER);\n        setflashIndices([]);\n    }\n  \n    const borderLessCard = {\n        border: 0, \n        alignItems: 'center'\n    };\n\n    return (\n        \n        <Container className=\"p-4\" style={{backgroundcolor: \"black\"}}>\n            <Jumbotron>\n                <h1>Hello, hooman!</h1>\n                <p>\n                 AI powered Tic-Tac-Toe Game.\n                </p>\n            </Jumbotron>\n            <CardDeck >\n                \n                <Card  border=\"secondary\" style={{width: '18rem'}} >\n                    <Card.Body >\n                        <Row >\n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Player\" variant=\"success\" size=\"lg\"\n                                         style={{marginRight: 10}}>\n                                <Dropdown.Item as=\"button\" eventKey={HUMAN_PLAYER} \n                                               onSelect={setPlayerFn}>Human (O)</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey={AI_PLAYER} \n                                               onSelect={setPlayerFn}>Computer (X)</Dropdown.Item>\n                            </DropdownButton>\n                            \n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Depth/Level\" style={{marginRight: 10}} variant=\"info\" size=\"lg\">\n                                <Dropdown.Item as=\"button\" eventKey=\"1\" onSelect={setDepthFn}>Easy</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey=\"5\" onSelect={setDepthFn}>Medium</Dropdown.Item>\n                                <Dropdown.Item as=\"button\" eventKey=\"100\" onSelect={setDepthFn}>Hard</Dropdown.Item>\n                            </DropdownButton>\n                        </Row>\n                    </Card.Body>\n                    <Card.Body >\n                        <Card.Title>Selections Made</Card.Title>\n                        <ListGroup className=\"list-group-flush\">\n                            <ListGroupItem>Player: {mapPlayer[player]}</ListGroupItem>\n                            <ListGroupItem>Depth: {depth !== 100 ? depth : \"MAX\"}</ListGroupItem>\n                            <ListGroupItem>Suggested Move: {move}</ListGroupItem>\n                           \n                        </ListGroup>\n                    </Card.Body>\n                    <Button size=\"lg\"\n                        variant=\"warning\"\n                        onClick={() => newGame()}\n                    >\n                        New Game\n                    </Button>\n\n                </Card>\n                <Card style={borderLessCard} >\n                \n                    <Grid grid={grid} clickHandler={onClick} flashIndices={flashIndices}/>\n                    \n                </Card>\n                \n                {show > 0 ? winModal() : null}\n                {showD > 0 ? drawModal() : null}\n                \n            </CardDeck>\n        </Container>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}